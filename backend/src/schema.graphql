# import * from './generated/prisma.graphql'

type SuccessMessage {
	message: String
}

type Mutation {
	createFarm(
		name: String!
		description: String!
		location: String!
		email: String!
		phone: String!
		image: String!
		website: String!
		tagline: String
	): Farm!
	updateFarm(
		id: ID!
		name: String
		description: String
		location: String
		email: String
		phone: String
		image: String
		website: String
		tagline: String
	): Farm!
	deleteFarm(id: ID!): Farm
	signup(name: String!, email: String!, password: String!): User!
	signin(email: String!, password: String!): User!
	signout: SuccessMessage
	requestReset(email: String!): SuccessMessage
	resetPassword(resetToken: String!, password: String!, confirmPassword: String!): User!
	createProduct(
		name: String!
		description: String!
		image: String
		price: Int!
		unit: String
		farmId: String
	): Product!
	updateProduct(
		id: ID!
		name: String
		description: String
		image: String
		price: Int
		unit: String
		farmId: String
	): Product!
	deleteProduct(id: ID!): Product
	addToCart(id: ID!): CartProduct
	removeFromCart(id: ID!): CartProduct
	removeOneFromCart(id: ID!): CartProduct
	createOrder(token: String!): Order!
}

type Query {
	farms(where: FarmWhereInput, orderBy: FarmOrderByInput, skip: Int, first: Int): [Farm]!
	farm(where: FarmWhereUniqueInput!): Farm
	farmsConnection(where: FarmWhereInput): FarmConnection!
	me: User
	products(
		where: ProductWhereInput
		orderBy: ProductOrderByInput
		skip: Int
		first: Int
		unit: String
	): [Product]!
	product(where: ProductWhereUniqueInput!, skip: Boolean): Product
	order(id: ID!): Order
	orders(orderBy: OrderOrderByInput): [Order]!
}

type User {
	id: ID!
	name: String!
	email: String!
	permissions: [Permission!]!
	cart: [CartProduct!]
	orders: [OrderProduct]
}
